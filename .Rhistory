' ',
rub,
'/',
ed,
sep = ''
),
content2 = span(Text(paste('Цены производителей, ', label_current, sep = ''), variant = 'mediumPlus'),
tags$sup(TooltipHost(
content = span(paste0('До 2017 года по ОКПД: "', prod_price_names[[1]], '"'), tags$br(), paste0('После 2017 года по ОКПД2: "', prod_price_names[[2]], '"')),
delay = 0,
Text(FontIcon(iconName = 'info'))
))),
size = 10,
card_type = 'neutral',
icon = 'fa-coins'
),
# y-o-y card
makeCard(
title = paste(
ifelse(ppi_yoy > 0, '+', ''),
ppi_yoy,
'%',
sep = ''
),
tooltip = paste(label_current, '/', label_yoy),
content = Text('Инфляция цен производителей, г/г:', variant = 'mediumPlus'),
content2 = Text('Инфляция цен производителей, м/м:', variant = 'mediumPlus'),
title2 = paste(
ifelse(ppi_prev > 0, '+', ''),
ppi_prev,
'%',
sep = ''
),
tooltip2 = paste(label_current, ' / ', label_prev, sep =
''),
size = 10,
card_type = ifelse(ppi_yoy > 0, "bad", "good"),
icon = ifelse(ppi_yoy > 0, "fa-arrow-up", "fa-arrow-down")
),
# export-import price
makeCard(
content = Text(paste0('Цены экспортеров, ',label_current_trade,':'), variant = 'mediumPlus'),
content2 = Text(paste0('Цены импортеров, ',label_current_trade,':'), variant = 'mediumPlus'),
title = paste(
price_ex,
' ',
rub,
'/',
ed_tradeprice,
sep = ''
),
title2 = paste(
price_im,
' ',
rub,
'/',
ed_tradeprice,
sep = ''
),
size = 10,
card_type = 'neutral',
icon = 'fa-coins'
)
)
)
}
runApp()
ed_tradeprice <- data$ed_tradeprice
ed_tradeprice
data=loadR('Сигареты и папиросы', where='data_output/supply_analysis/')
#---------------------------------------------------------------------------------------------------
# Load libraries, functions & dependencies
#---------------------------------------------------------------------------------------------------
# Sys.setlocale(category = "LC_ALL", locale = "C")
options(encoding = "UTF-8")
source('plots.R')
options(shiny.sanitize.errors = FALSE)
shiny::addResourcePath("shiny.router", system.file("www", package = "shiny.router"))
shiny_router_js_src <- file.path("shiny.router", "shiny.router.js")
shiny_router_script_tag <-
shiny::tags$script(type = "text/javascript", src = shiny_router_js_src)
#---------------------------------------------------------------------------------------------------
# Technical preparations
#---------------------------------------------------------------------------------------------------
# Set encoding
Sys.setlocale('LC_TIME', 'Russian')
# Prepare Russian month labels for graphs
labelset <- clock_labels_lookup('ru')[[2]]
labelset <- substr(labelset, 1, nchar(labelset) - 1)
labelset[5] <- 'май'
# Prepare list of models
model_groups <- read_xlsx('data_output/models/model_groups.xlsx')
models <- substr(model_groups$model, 1, nchar(model_groups$model)-6)
groups_counter <- model_groups %>%
group_by(group) %>%
summarise(n = n())
groups_counter <- groups_counter[match(unique(model_groups$group), groups_counter$group),]
groups_counter$cumsum <- cumsum(groups_counter$n)
groups_nav <- list()
for (i in 1:nrow(groups_counter)) {
elem <- list(key = paste('g', i, sep=''), name = groups_counter$group[i], startIndex = groups_counter$cumsum[i] - groups_counter$n[i], count = groups_counter$n[i], isCollapsed = ifelse(i==1, FALSE, TRUE))
groups_nav[[i]] <- elem
}
prods_list <- as.list(models)
options <- list(list(key = models[1], text = models[1]))
for (i in 2:length(models)) {
elem <- list(key = models[i], text = models[i])
options[[i]] <- elem
}
# Prepare list of supply markets for analysis
market_groups <- read_xlsx('data_output/supply_analysis/market_groups.xlsx')
markets <- substr(market_groups$model, 1, nchar(market_groups$model)-6)
groups_counter <- market_groups %>%
group_by(group) %>%
summarise(n = n())
groups_counter <- groups_counter[match(unique(market_groups$group), groups_counter$group),]
groups_counter$cumsum <- cumsum(groups_counter$n)
groups_nav_supply <- list()
for (i in 1:nrow(groups_counter)) {
elem <- list(key = paste('g', i, sep=''), name = groups_counter$group[i], startIndex = groups_counter$cumsum[i] - groups_counter$n[i], count = groups_counter$n[i], isCollapsed = ifelse(i==1, FALSE, TRUE))
groups_nav_supply[[i]] <- elem
}
prods_list_supply <- as.list(markets)
options <- list(list(key = markets[1], text = markets[1]))
for (i in 2:length(markets)) {
elem <- list(key = markets[i], text = markets[i])
options[[i]] <- elem
}
market_models_corresp <- read_xlsx('data_output/correspondence.xlsx')
# rus_map <- readRDS('data_output/federal_districts.rds')
date_last <- as.Date('2022-02-01')
date_last_trade <- as.Date('2022-01-01')
deltas <- data$meanImpact
deltas
if (!is.na(deltas)) {
vals <- round(c(deltas$d_tax_implied, deltas$d_prod, deltas$d_fot, -deltas$marking_cost)/10^9,1)
df <- data.frame(
desc=c('Налоги', 'Выручка', 'ФОТ', 'Издержки', 'Итого'),
value=c(vals, sum(vals))
)
df$desc <- factor(df$desc, levels = df$desc)
df$id <- seq_along(df$value)
df$type <- ifelse(df$value > 0, "in", "out")
df[df$desc %in% c("Итого"), "type"] <- "net"
df$end <- cumsum(df$value)
df$end <- c(head(df$end, -1), 0)
df$start <- c(0, head(df$end, -1))
df <- df[, c(3, 1, 4, 6, 5, 2)]
balance <- ggplot(df) +
geom_rect(aes(x = desc, fill = type, xmin = id - 0.4, xmax = id + 0.4, ymin = end, ymax = start, text=
paste0(desc, ': ', value, ' млрд руб.')
)) +
geom_segment(data = df[1:(nrow(df) -1),], aes(x = id + 0.4,
xend = id + 0.6,
y = end,
yend = end), col='darkgray') +
geom_text(aes(x=desc, y=start+(end-start)/2, label=paste0(value)), color="black", size=4) +
coord_flip() +
ggtitle('Баланс затрат и выгод') +
ylab('млрд руб.') +
xlab(NULL) +
scale_fill_manual(values=c("in"="#B0E3AB", "out"="#F9AAB0", "net"='#C7E0F4')) +
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
balance <- ggplotly(balance, tooltip='text') %>% layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
balance$x$data[[7]]$hoverinfo <- "none"
# df2 <- df %>%
#   filter(desc == 'Налоги') %>%
#   pull(value)
#
# taxStruct = data$taxStruct
# df2 = data.frame(value = round(df2 * (taxStruct %>% pull(structure)),1),
#                  name = taxStruct %>% pull(type))
# df2 <- df2[order(df2$value, decreasing=T),]
# df2 <- df2[c(2:nrow(df2),1),]
# df2$id <- seq_along(df2$value)
# df2$name <- factor(df2$name, levels = df2$name)
# df2$type <- ifelse(df2$value > 0, "in", "out")
# df2[df2$name %in% c("Всего"), "type"] <- "net"
#
# df2$end <- cumsum(df2$value)
# df2$end <- c(head(df2$end, -1), 0)
# df2$start <- c(0, head(df2$end, -1))
# df2 <- df2[, c(3, 1, 4, 6, 5, 2)]
#
# balance_tax <- df2 %>%
#   ggplot() +
#   geom_rect(aes(x = name, fill = type, xmin = id - 0.4, xmax = id + 0.4, ymin = end, ymax = start, text=
#                   paste0(name, ': ', value, ' млрд руб.')
#   )) +
#   geom_segment(data = df2[1:(nrow(df2) -1),], aes(x = id + 0.4,
#                                                 xend = id + 0.6,
#                                                 y = end,
#                                                 yend = end), col='darkgray') +
#   geom_text(aes(x=name, y=start+(end-start)/2, label=paste0(value)), color="black", size=4) +
#   coord_flip() +
#   # ggtitle('Прирост налоговых поступлений') +
#   ylab('млрд руб.') +
#   xlab(NULL) +
#   scale_fill_manual(values=c("in"="#B0E3AB", "out"="#F9AAB0", "net"='#C7E0F4')) +
#   theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
# balance_tax
# balance_tax <- ggplotly(balance_tax, tooltip='text') %>% layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
#                                                         autosize = T, dragmode=FALSE,
#                                                         xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
# balance_tax$x$data[[8]]$hoverinfo <- "none"
#
# balance_tax
# balance
empl_fig <- plot_ly(
domain = list(x = c(0.25, 0.5), y = c(0.8, 1)),
type = "indicator",
mode = "delta",
gauge = list(shape = "bullet"),
delta = list(reference = 0, font = list(size=18, family='Segoe UI', color='#323130')),
value = round(deltas$d_empl),
title = list(text = "Занятость, чел.", font = list(size=18, family='Segoe UI', color='#323130')),
# height = 150
)
capacity_fig <- plot_ly(
domain = list(x = c(0.5, 0.75), y = c(0.8, 1)),
type = "indicator",
mode = "delta",
gauge = list(shape = "bullet"),
delta = list(reference = 1, relative=TRUE, font = list(size=18, family='Segoe UI', color='#323130')),
value = 1 + round(deltas$d_cap_implied,2)/100,
title= list(text = "Загрузка мощностей", font = list(size=18, family='Segoe UI', color='#323130')),
# height = 150
)
# capacity_fig
combo2 <- subplot(empl_fig, capacity_fig, nrows=2) %>%  layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
# combo2
combo3 <- subplot(combo2, balance, nrows=2, titleY = TRUE, which_layout=2, heights=c(0.25,0.75)) %>%  layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
} else {
combo3 <- empty_plot("Баланс затрат и выгод ОЦМ еще не рассчитан", x = 0.5, y=0.5) %>%  layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
}
combo3 %>% config(displayModeBar = F)
balance
balance <- ggplot(df) +
geom_rect(aes(x = desc, fill = type, xmin = id - 0.4, xmax = id + 0.4, ymin = end, ymax = start, text=
paste0(desc, ': ', value, ' млрд руб.')
)) +
geom_segment(data = df[1:(nrow(df) -1),], aes(x = id + 0.4,
xend = id + 0.6,
y = end,
yend = end), col='darkgray') +
geom_text(aes(x=desc, y=start+(end-start)/2, label=paste0(value)), color="black", size=4) +
coord_flip() +
ggtitle('Баланс затрат и выгод') +
ylab('млрд руб.') +
xlab(NULL) +
scale_fill_manual(values=c("in"="#B0E3AB", "out"="#F9AAB0", "net"='#C7E0F4')) +
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
balance <- ggplotly(balance, tooltip='text') %>% layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
balance$x$data[[7]]$hoverinfo <- "none"
balance
empl_fig
capacity_fig
balance_plot <- function(data) {
deltas <- data$meanImpact
if (!is.na(deltas)) {
vals <- round(c(deltas$d_tax_implied, deltas$d_prod, deltas$d_fot, -deltas$marking_cost)/10^9,1)
df <- data.frame(
desc=c('Налоги', 'Выручка', 'ФОТ', 'Издержки', 'Итого'),
value=c(vals, sum(vals))
)
df$desc <- factor(df$desc, levels = df$desc)
df$id <- seq_along(df$value)
df$type <- ifelse(df$value > 0, "in", "out")
df[df$desc %in% c("Итого"), "type"] <- "net"
df$end <- cumsum(df$value)
df$end <- c(head(df$end, -1), 0)
df$start <- c(0, head(df$end, -1))
df <- df[, c(3, 1, 4, 6, 5, 2)]
balance <- ggplot(df) +
geom_rect(aes(x = desc, fill = type, xmin = id - 0.4, xmax = id + 0.4, ymin = end, ymax = start, text=
paste0(desc, ': ', value, ' млрд руб.')
)) +
geom_segment(data = df[1:(nrow(df) -1),], aes(x = id + 0.4,
xend = id + 0.6,
y = end,
yend = end), col='darkgray') +
geom_text(aes(x=desc, y=start+(end-start)/2, label=paste0(value)), color="black", size=4) +
coord_flip() +
ggtitle('Баланс затрат и выгод') +
ylab('млрд руб.') +
xlab(NULL) +
scale_fill_manual(values=c("in"="#B0E3AB", "out"="#F9AAB0", "net"='#C7E0F4')) +
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
balance <- ggplotly(balance, tooltip='text') %>% layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
balance$x$data[[7]]$hoverinfo <- "none"
# df2 <- df %>%
#   filter(desc == 'Налоги') %>%
#   pull(value)
#
# taxStruct = data$taxStruct
# df2 = data.frame(value = round(df2 * (taxStruct %>% pull(structure)),1),
#                  name = taxStruct %>% pull(type))
# df2 <- df2[order(df2$value, decreasing=T),]
# df2 <- df2[c(2:nrow(df2),1),]
# df2$id <- seq_along(df2$value)
# df2$name <- factor(df2$name, levels = df2$name)
# df2$type <- ifelse(df2$value > 0, "in", "out")
# df2[df2$name %in% c("Всего"), "type"] <- "net"
#
# df2$end <- cumsum(df2$value)
# df2$end <- c(head(df2$end, -1), 0)
# df2$start <- c(0, head(df2$end, -1))
# df2 <- df2[, c(3, 1, 4, 6, 5, 2)]
#
# balance_tax <- df2 %>%
#   ggplot() +
#   geom_rect(aes(x = name, fill = type, xmin = id - 0.4, xmax = id + 0.4, ymin = end, ymax = start, text=
#                   paste0(name, ': ', value, ' млрд руб.')
#   )) +
#   geom_segment(data = df2[1:(nrow(df2) -1),], aes(x = id + 0.4,
#                                                 xend = id + 0.6,
#                                                 y = end,
#                                                 yend = end), col='darkgray') +
#   geom_text(aes(x=name, y=start+(end-start)/2, label=paste0(value)), color="black", size=4) +
#   coord_flip() +
#   # ggtitle('Прирост налоговых поступлений') +
#   ylab('млрд руб.') +
#   xlab(NULL) +
#   scale_fill_manual(values=c("in"="#B0E3AB", "out"="#F9AAB0", "net"='#C7E0F4')) +
#   theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
# balance_tax
# balance_tax <- ggplotly(balance_tax, tooltip='text') %>% layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
#                                                         autosize = T, dragmode=FALSE,
#                                                         xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
# balance_tax$x$data[[8]]$hoverinfo <- "none"
#
# balance_tax
# balance
empl_fig <- plot_ly(
domain = list(x = c(0.25, 0.5), y = c(0.8, 1)),
type = "indicator",
mode = "delta",
gauge = list(shape = "bullet"),
delta = list(reference = 0, font = list(size=18, family='Segoe UI', color='#323130')),
value = round(deltas$d_empl),
title = list(text = "Занятость, чел.", font = list(size=18, family='Segoe UI', color='#323130')),
# height = 150
)
capacity_fig <- plot_ly(
domain = list(x = c(0.5, 0.75), y = c(0.8, 1)),
type = "indicator",
mode = "delta",
gauge = list(shape = "bullet"),
delta = list(reference = 1, relative=TRUE, font = list(size=18, family='Segoe UI', color='#323130')),
value = 1 + round(deltas$d_cap_implied,2)/100,
title= list(text = "Загрузка мощностей", font = list(size=18, family='Segoe UI', color='#323130')),
# height = 150
)
# capacity_fig
combo2 <- subplot(empl_fig, capacity_fig, nrows=2) %>%  layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
# combo2
combo3 <- subplot(combo2, balance, nrows=2, titleY = TRUE, which_layout=2, heights=c(0.25,0.75)) %>%  layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
} else {
combo3 <- empty_plot("Баланс затрат и выгод ОЦМ еще не рассчитан", x = 0.5, y=0.5) %>%  layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
}
combo3 %>% config(displayModeBar = F)
}
balance_plot(data)
counterfeit_plot(data)
combo <- subplot(cntft_dyn, cntft_plot, nrows  = 1, titleY = TRUE) %>% layout(annotations = annotations, showlegend = F, plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
dragmode=FALSE) %>%
config(displayModeBar = F, locale = 'ru')
if (!is.na(data$counterfeit)) {
df <- data$counterfeit %>%
drop_na() %>%
filter(date > as.Date('2014-01-01'))
value <- last(df %>%
pull(counterfeit_smooth))
date <- last(df %>%
pull(date))
cntft_plot <- plot_ly(
domain = list(x = c(0.5, 1), y = c(0.2, 0.6)),
value = value,
# title = list(text = paste0('Доля нелегального оборота\n',as.yearqtr(date)), font=list(size=20, family='Segoe UI', color='#323130')),
type = "indicator",
mode = "gauge+number",
gauge = list(
axis = list(range = list(NULL, 50), ticks='outside', ticklen=5, tickcolor='#323130', tickfont=list(size=14, family='Segoe UI', color='#323130'), ticksuffix='%'),
bar = list(color='#e83131'),
borderwidth = 0,
bordercolor = '#0078D4',
threshold = list(line = list(color='#0078D4'), thickness=15, value = value)
),
number = list(
suffix='%',
prefix='     ',
font = list(size=18, family='Segoe UI', color='#323130')
)
)
# df <- df %>%
#   mutate(counterfeit_smooth = lowess(df$counterfeit, f=1/4)$y)
cntft_dyn <- plot_ly(df,
x = df$date, y = df$counterfeit_smooth, mode = 'lines', hoverinfo = 'text', text=paste0('Доля нелегального оборота',
', ',
as.yearmon(df$date),
': ',
format(round(df$counterfeit_smooth, 1), big.mark=" "),
'%'),
type = "scatter", line = list(color = "#007d3c")) %>%
add_trace(y = ~counterfeit, name = 'trace 0', mode = 'lines', opacity=opacity, hoverinfo = 'none')  %>%
layout(yaxis = list(title = 'Доля нелегального оборота, %', fixedrange=T),
xaxis = list(fixedrange = TRUE, dtick = "M3", tickformat="%qК%Y%"))
if (!is.na(data$markingDate)) {
vline <- function(x = 0, color = "red") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
cntft_dyn <- cntft_dyn %>%
layout(shapes = list(vline(data$markingDate))) %>%
add_segments(x = data$markingDate, xend = last(df$date), y = df[df$date==data$markingDate,'counterfeit_smooth'], text=NA, yend = df[df$date==data$markingDate,'counterfeit_smooth'], line = list(color='black')) %>%
# add_segments(x = last(df$date), xend = last(df$date), y = df[df$date==data$markingDate,'counterfeit_smooth'], yend = last(df$counterfeit_smooth), line = list(dash = "dash")) %>%
add_annotations(x = last(df$date),
y = last(df$counterfeit_smooth),
xref = "x", yref = "y",
axref = "x", ayref = "y",
text = "",
arrowcolor = "black",
showarrow = T,
line = list(dash = "dash"),
ax = last(df$date),
ay = df[df$date==data$markingDate,'counterfeit_smooth']) %>%
add_annotations(x = as.Date(round( (as.numeric(data$markingDate) + as.numeric(last(df$date))) /2,0)),
y = df[df$date==data$markingDate,'counterfeit_smooth']*1.1,
xref = "x", yref = "y",
text = paste0( round( last(df$counterfeit_smooth) - df[df$date==data$markingDate,'counterfeit_smooth'], 1), '%'),
font = list(size=18),
showarrow = F) %>%
add_annotations(x = data$markingDate-months(10), y = max(max(df$counterfeit_smooth), max(df$counterfeit))*0.9,
text = c("Начало ОЦМ в отрасли"), hoverinfo='none', showarrow=F)
cntft_dyn %>% layout(showlegend = FALSE)
}
annotations = list(
list(
x = 0.75,
y = 1,
text = paste0('Доля нелегального оборота, ',as.yearqtr(date)),
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE,
font = list(size = 18)
),
list(
x = 0.25,
y = 1,
text = "Динамика доли нелегального оборота",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE,
font = list(size = 18)
)
)
combo <- subplot(cntft_dyn, cntft_plot, nrows  = 1, titleY = TRUE) %>% layout(annotations = annotations, showlegend = F, plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
dragmode=FALSE) %>%
config(displayModeBar = F, locale = 'ru')
combo
} else {
combo <- empty_plot("Доля нелегального оборота еще не рассчитана", x = 0.5, y=0.5) %>%  layout(plot_bgcolor  = "rgba(0, 0, 0, 0)", paper_bgcolor = "rgba(0, 0, 0, 0)",
autosize = T, dragmode=FALSE,
xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
combo %>% config(displayModeBar = F)
}
!is.na(data$counterfeit)
data$counterfeit
if (!is.na(data$counterfeit)) {
print('a')}
View(data)
!is.na(data$counterfeit)[1]
if (!is.na(data$counterfeit)[1]) {
print('a')}
if (!is.na(data$counterfeist)[1]) {
print('a')}
class(data$counterfeit)
deltas <- data$meanImpact
!is.na(deltas)
data$meanImpact
shiny::runApp()
runApp()
runApp()
