shiny::runApp()
runApp()
market_name='Сигареты и папиросы'
market <- loadR(market_name, where='data_output/supply_analysis/')
data=market
df <- data$df_FD
names(df)[2] <- 'name'
# choice_date <- floor_date(as.Date(), unit='month')
data_date <- df %>%
filter(date == date_choice)
date_choice=as.Date('2021-12-01')
# choice_date <- floor_date(as.Date(), unit='month')
data_date <- df %>%
filter(date == date_choice)
rus_map <- readRDS('data_output/federal_districts.rds')
if (date_choice >= as.Date('2015-10-01')) {
rus_map_noCrimea <- rus_map %>%
mutate(name = droplevels(replace(name, name == "Крымский федеральный округ", 'Южный федеральный округ')))
plot_data <- rus_map_noCrimea %>%
left_join(data_date)
} else {
plot_data <- rus_map %>%
left_join(data_date)
}
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value)) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
theme(axis.ticks = element_blank())
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value)) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
theme_void()
t
t <- ggplotly(t) %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)") %>%
config(locale = 'ru')
t
t <- ggplotly(t) %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE), yaxis = list(showgrid = FALSE)) %>%
config(locale = 'ru')
t
runApp()
runApp()
tags$html("center")
HTML("center")
HTML("<center?")
HTML("<center>")
runApp()
demoAirDatepicker("months")
runApp()
runApp()
runApp()
runApp()
runApp()
View(plot_data)
View(plot_data)
levels(plot_data$name)
class(plot_data$name)
unique(plot_data$name)
setNames(replacement, patterns)
patterns = c("Северо-Западный федеральный округ", "Сибирский федеральный округ", "Уральский федеральный округ", "Дальневосточный федеральный округ", "Южный федеральный округ",
"Приволжский федеральный округ", "Центральный федеральный округ", "Северо-Кавказский федеральный округ")
replacement = c("СЗФО", "СФО", "УФО", "ДФО", "ЮФО", "ПФО", "ЦФО", "СКФО")
setNames(replacement, patterns)
plot_data <- plot_data %>%
mutate(name = str_replace_all(name, setNames(replacement, patterns)))
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
ed <- data$ed
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
theme_void()
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_manual(name=paste('Производство, ', ed, sep='')) +
theme_void()
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_discreet(name=paste('Производство, ', ed, sep='')) +
theme_void()
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_discrete(name=paste('Производство, ', ed, sep='')) +
theme_void()
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_manual(name=paste('Производство, ', ed, sep='')) +
theme_void()
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep='')) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
runApp()
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep='')) +
theme_void()
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=c(0, 15000)) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
limits <- c(max(plot_data$value), min(plot_data$value))
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
# choice_date <- floor_date(as.Date(), unit='month')
limits <- c(max(df$value), min(df$value))
limits
df <- data$df_FD
ed <- data$ed
names(df)[2] <- 'name'
# choice_date <- floor_date(as.Date(), unit='month')
limits <- c(max(df$value), min(df$value))
limits
# choice_date <- floor_date(as.Date(), unit='month')
limits <- c(max(df$value, na.rm=TRUE), min(df$value, na.rm=TRUE))
limits
data_date <- df %>%
filter(date == date_choice)
if (date_choice >= as.Date('2015-10-01')) {
rus_map_noCrimea <- rus_map %>%
mutate(name = droplevels(replace(name, name == "Крымский федеральный округ", 'Южный федеральный округ')))
plot_data <- rus_map_noCrimea %>%
left_join(data_date)
} else {
plot_data <- rus_map %>%
left_join(data_date)
}
patterns = c("Северо-Западный федеральный округ", "Сибирский федеральный округ", "Уральский федеральный округ", "Дальневосточный федеральный округ", "Южный федеральный округ",
"Приволжский федеральный округ", "Центральный федеральный округ", "Северо-Кавказский федеральный округ")
replacement = c("СЗФО", "СФО", "УФО", "ДФО", "ЮФО", "ПФО", "ЦФО", "СКФО")
plot_data <- plot_data %>%
mutate(name = str_replace_all(name, setNames(replacement, patterns)))
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
limits
# choice_date <- floor_date(as.Date(), unit='month')
limits <- c(min(df$value, na.rm=TRUE), max(df$value, na.rm=TRUE))
data_date <- df %>%
filter(date == date_choice)
if (date_choice >= as.Date('2015-10-01')) {
rus_map_noCrimea <- rus_map %>%
mutate(name = droplevels(replace(name, name == "Крымский федеральный округ", 'Южный федеральный округ')))
plot_data <- rus_map_noCrimea %>%
left_join(data_date)
} else {
plot_data <- rus_map %>%
left_join(data_date)
}
patterns = c("Северо-Западный федеральный округ", "Сибирский федеральный округ", "Уральский федеральный округ", "Дальневосточный федеральный округ", "Южный федеральный округ",
"Приволжский федеральный округ", "Центральный федеральный округ", "Северо-Кавказский федеральный округ")
replacement = c("СЗФО", "СФО", "УФО", "ДФО", "ЮФО", "ПФО", "ЦФО", "СКФО")
plot_data <- plot_data %>%
mutate(name = str_replace_all(name, setNames(replacement, patterns)))
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits) +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
runApp()
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits, trans='log') +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
breaks <- seq(log(limits[1]), log(limits[2]))
breaks
breaks <- seq(log(limits[1]), log(limits[2]), length.out=5)
limits[2]
log(limits[2])
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits, trans='log', breaks=breaks) +
theme_void()
t
breaks <- seq(limits[1], limits[2], length.out=5)
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits, trans='log', breaks=breaks) +
theme_void()
t
log_breaks(n=5, base=e)
log_breaks(n=5, base=exp)
log_breaks(n=5, base=exp())
log_breaks(n=5, base=2)
log_breaks(n=5, base=2)
log_breaks(n=5, base=2)()
log_breaks(limits, n=5, base=2)
log_breaks(x=limits, n=5, base=2)
log_breaks(n=5, base=2)limits
log_breaks(n=5, base=2)()limits
limits
log_breaks()(c(1, 1e6))
log_breaks(n=5)(c(1, 1e6))
log_breaks(n=5, base=10)(c(1, 1e6))
log_breaks(n=5, base=2)(c(1, 1e6))
log_breaks(n=5, base=10)(c(1, 1e6))
log_breaks(n=5, base=10)(limits)
breaks <- log_breaks(n=5, base=10)(limits)
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits, trans='log', breaks=breaks) +
theme_void()
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits, trans='log10', breaks=breaks) +
theme_void()
t
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits, trans='log10') +
theme_void()
t
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
runApp()
View(data)
View(data[["df_FD"]])
# make seasonal adjustment across regions separately
df_FD <- data$df_FD
i=unique(df_FD$OKATO)[1]
i
temp <- df_FD[df_FD$OKATO==i,]
View(temp)
start <- c(year(temp$date[1]), month(temp$date[1]))
start
t <- ts(temp$value, frequency = 12, start=start)
# b) perform seasonal adjustment
s <- seas(t, outlier=NULL)
# attach all necessary packages  -----------------------------------------------
using("data.table", "readxl", "dplyr", "xts", "plotly", "KFAS", "seasonal", "stats",
"lubridate", "xml2", "stringr", "readtext", "rvest",  "readr", "prophet", "tsibble", "fable", "fable.prophet", "timeDate", "feasts", "imputeTS", "ISOweek", "TSstudio", "stringr", "forecast", "ggplot2", "tsbox", "tempdisagg", "writexl", "Quandl", 'mcGlobaloptim')
# b) perform seasonal adjustment
s <- seas(t, outlier=NULL)
# b) perform seasonal adjustment
s <- try(seas(t, outlier=NULL))
View(df_FD)
# make seasonal adjustment across regions separately
df_FD <- data$df_FD
for (i in unique(df_FD$OKATO)) {
temp <- df_FD[df_FD$OKATO==i,]
start <- c(year(temp$date[1]), month(temp$date[1]))
t <- ts(temp$value, frequency = 12, start=start)
# b) perform seasonal adjustment
s <- try(seas(t, outlier=NULL))
# c) replace original series
if (!class(s)=='try-error') {
df_FD[df_FD$OKATO==i,'value'] <- as.numeric(final(s))
}
}
# make seasonal adjustment across regions separately
df_FD <- data$df_FD
i=unique(df_FD$OKATO)[1]
i
temp <- df_FD[df_FD$OKATO==i,]
start <- c(year(temp$date[1]), month(temp$date[1]))
t <- ts(temp$value, frequency = 12, start=start)
# b) perform seasonal adjustment
s <- try(seas(t, outlier=NULL))
# c) replace original series
if (!class(s)=='try-error') {
df_FD[df_FD$OKATO==i,'value'] <- as.numeric(final(s))
}
i=unique(df_FD$OKATO)[2]
i
temp <- df_FD[df_FD$OKATO==i,]
start <- c(year(temp$date[1]), month(temp$date[1]))
t <- ts(temp$value, frequency = 12, start=start)
# make seasonal adjustment across regions separately
df_FD <- data$df_FD
runApp()
#' Interactive map displaying production across Federal Districts of Russia
#'
#' @param data A list returned by prepare_data()
#'
#' @return Produces an interactive graph showing the dynamics of total supply on the market
#' @export
production_map <- function(data, rus_map, date_choice, sa = TRUE) {
if (sa) {
df <- data$df_FD_sa
} else{
df <- data$df_FD
}
ed <- data$ed
names(df)[2] <- 'name'
# choice_date <- floor_date(as.Date(), unit='month')
limits <- c(min(df$value, na.rm=TRUE), max(df$value, na.rm=TRUE))
data_date <- df %>%
filter(date == date_choice)
if (date_choice >= as.Date('2015-10-01')) {
rus_map_noCrimea <- rus_map %>%
mutate(name = droplevels(replace(name, name == "Крымский федеральный округ", 'Южный федеральный округ')))
plot_data <- rus_map_noCrimea %>%
left_join(data_date)
} else {
plot_data <- rus_map %>%
left_join(data_date)
}
patterns = c("Северо-Западный федеральный округ", "Сибирский федеральный округ", "Уральский федеральный округ", "Дальневосточный федеральный округ", "Южный федеральный округ",
"Приволжский федеральный округ", "Центральный федеральный округ", "Северо-Кавказский федеральный округ")
replacement = c("СЗФО", "СФО", "УФО", "ДФО", "ЮФО", "ПФО", "ЦФО", "СКФО")
plot_data <- plot_data %>%
mutate(name = str_replace_all(name, setNames(replacement, patterns)))
# breaks <- log_breaks(n=5, base=10)(limits)
t <- ggplot(plot_data, aes(x=long, y=lat, fill=value, text=paste('Производство, ', name, ', ', format(date_choice, '%b %y'), ': ', round(value), ' ', ed, sep=''))) +
coord_fixed(ratio = 2) +
geom_polygon(colour="black", size=0.1, aes(group=group)) +
scale_fill_gradient(name=paste('Производство, ', ed, sep=''), limits=limits, trans='log10') +
theme_void()
t
t <- ggplotly(t, tooltip='text') %>% config(displayModeBar = F) %>%
# layout(legend = list(orientation = "h", x = 0, y = -0.1)) %>%
layout(plot_bgcolor  = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)", xaxis = list(showgrid = FALSE, showline=FALSE), yaxis = list(showgrid = FALSE, showline=FALSE)) %>%
config(locale = 'ru')
t
}
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('tilemaps')
shiny::runApp()
runApp()
runApp()
plot_map <- function(level, data, sa, date_choice) {
ed <- data$ed
if (level=='reg') {
grid <- read.table('data_output/rus_grid_reg2.csv', header=TRUE) %>%
mutate(code = ifelse(nchar(code)==10, paste0('0', code), code)) %>%
select(-code_FD, -FD)
df <- data$df_reg %>% mutate(value = ifelse(value==0, NA, value))
# limits <- c(min(df$value, na.rm=TRUE), max(df$value, na.rm=TRUE))
date_choice=as.Date(date_choice)
data_date <- df %>%
filter(date == date_choice) %>%
right_join(grid, by=c("OKATO_id" = "code")) %>% select(-row, -col) %>% rename("code" = "OKATO_id")
}
if (level=='FD') {
grid <- read.table('data_output/rus_grid_reg2.csv', header=TRUE) %>%
mutate(code = ifelse(nchar(code)==10, paste0('0', code), code)) %>%
mutate(code_FD = ifelse(nchar(code_FD)==2, paste0('0', code_FD), code_FD))
if (sa) {
df <- data$df_FD_sa %>% mutate(value = ifelse(value==0, NA, value))
} else{
df <- data$df_FD %>% mutate(value = ifelse(value==0, NA, value))
}
# limits <- c(min(df$value, na.rm=TRUE), max(df$value, na.rm=TRUE))
date_choice=as.Date('2021-01-01')
data_date <- df %>%
filter(date == date_choice) %>%
left_join(grid, by=c("OKATO_id" = "code_FD"))
grid <- grid %>% select(-code_FD) %>% rename("name" = "FD")
}
p <- data_date %>% ggplot() +
# statebins:::geom_rrect(mapping=aes(xmin=1, xmax=2, ymin=1, ymax=2),
#                        fill = '#d0e1e1',
#                        color=NA, alpha=0.7) +
# statebins:::geom_rrect(mapping=aes(xmin=1, xmax=2, ymin=1, ymax=2, fill = value),
#                        color=NA, alpha=1) +
geom_raster(mapping=aes(x=1, y=1),
size=1,
fill = '#d0e1e1',
color=NA, alpha=0.7) +
geom_raster(mapping=aes(x=1, y=1, fill = value), size=1,
color=NA, alpha=1) +
facet_geo(~ code, grid = grid) +
labs(x='', y='') +
scale_fill_gradient(name=paste('Производство, ', ed, sep='')) +
theme_minimal() +
theme(aspect.ratio = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
strip.placement = "bottom",
plot.title = element_text(hjust = 5),
strip.background = element_blank(),
strip.text.x = element_blank(),
line = element_blank())
if (level=='reg') {
p <- p + geom_text(aes(x = 1.5, y = 1.5, label = name_short), col="white")
} else {
p <- p + geom_text(aes(x = 1.5, y = 1.5, label = FD), col="white")
}
p
}
shiny::runApp()
