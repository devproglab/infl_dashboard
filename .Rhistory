}
label_prev_period <-
paste(day(as.Date(date_prev_period)), ' ', labelset[month(as.Date(date_prev_period))], '-', substr(year(as.Date(
date_prev_period
)), 3, 4), sep = '')
if (weekly) {
date_fcast_period = as.Date(zoo::index(estimated$forecast[5]))
} else {
date_fcast_period = as.Date(zoo::index(forecast_period))
}
label_fcast_period <-
paste(day(as.Date(date_fcast_period)), ' ', labelset[month(as.Date(date_fcast_period))], '-', substr(year(as.Date(
date_fcast_period
)), 3, 4), sep = '')
date_prev_yoy = nth(zoo::index(estimated$decomp2[, 1]),
ifelse(weekly,-53,-13))
date_next_yoy = nth(zoo::index(estimated$decomp2[, 1]),
ifelse(weekly,-52,-12))
date_fcast_yoy = as.Date(zoo::index(forecast_yoy))
label_prev_yoy <-
paste(day(as.Date(date_prev_yoy)), ' ', labelset[month(as.Date(date_prev_yoy))], '-', substr(year(as.Date(date_prev_yoy)), 3, 4), sep =
'')
label_fcast_yoy <-
paste(day(as.Date(date_fcast_yoy)), ' ', labelset[month(as.Date(date_fcast_yoy))], '-', substr(year(as.Date(date_fcast_yoy)), 3, 4), sep =
'')
label_next_yoy <-
paste(day(as.Date(date_next_yoy)), ' ', labelset[month(as.Date(date_next_yoy))], '-', substr(year(as.Date(date_next_yoy)), 3, 4), sep =
'')
Stack(
div(model_name, style = 'margin-bottom:10px;', class = 'ms-fontSize-20 ms-fontWeight-regular'),
Stack(
horizontal = TRUE,
horizontalAlign = 'space-between',
tokens = list(childrenGap = 10),
# Current price card
makeCard(
title = paste(
price,
' ',
rub,
'/',
substr(
model_name,
regexpr("([^, ]*$)", model_name)[1],
stop = nchar(model_name)
),
sep = ''
),
content2 = Text(paste('Цена, ', label_current, sep = ''), variant = 'mediumPlus'),
size = 10,
card_type = 'neutral',
icon = 'fa-coins'
),
# w-o-w / m-o-m card
makeCard(
content = Text('Инфляция:', variant = 'mediumPlus'),
content2 = Text('Прогноз:', variant = 'mediumPlus'),
title = paste(
ifelse(period_change > 0, '+', ''),
round(period_change * 100, 2),
'%, м/м',
sep = ''
),
tooltip = paste(label_current, '/', label_prev_period),
tooltip2 = paste(label_fcast_period, '/', label_current),
title2 = paste(
ifelse(forecast_period$value > 0, '+', ''),
round(forecast_period$value, 2),
'%, м/м',
sep = ''
),
size = 10,
card_type = ifelse(period_change > 0, "bad", "good"),
icon = ifelse(period_change > 0, "fa-arrow-up", "fa-arrow-down")
),
# y-o-y card
makeCard(
title = paste(
ifelse(yoy_change > 0, '+', ''),
round(yoy_change * 100, 2),
'%, г/г',
sep = ''
),
tooltip = paste(label_current, '/', label_prev_yoy),
content = Text('Инфляция:', variant = 'mediumPlus'),
content2 = Text('Прогноз:', variant = 'mediumPlus'),
title2 = paste(
ifelse(forecast_yoy$value > 0, '+', ''),
round(forecast_yoy$value, 2),
'%, г/г',
sep = ''
),
tooltip2 = paste(label_fcast_yoy, ' / ', label_next_yoy, sep =
''),
size = 10,
card_type = ifelse(yoy_change > 0, "bad", "good"),
icon = ifelse(yoy_change > 0, "fa-arrow-up", "fa-arrow-down")
),
# CPI weight card
if (is.na(weight)) {
makeCard(
title = Text('Вес в ИПЦ недоступен', variant = 'mediumPlus'),
size = 10,
card_type = 'neutral',
icon = 'fa-shopping-basket'
)
} else {
makeCard(
title = paste(weight, '%', sep = ''),
content2 = Text('Вес в ИПЦ', variant = 'mediumPlus'),
size = 10,
card_type = 'neutral',
icon = 'fa-shopping-basket'
)
}
)
)
# Create value boxes
output$card_set <- renderUI({
estimated <- model()
weight = estimated$weight
model_name <- estimated$model_name
n.ahead <- estimated$n.ahead
weekly <- estimated$weekly
price = round(last(estimated$df[[1]]), 2)
if (weekly) {
length <- nrow(estimated$dfmod_unsmoothed)
period_change = sum(estimated$dfmod_unsmoothed[(length - n.ahead + 1 - 4):(length - n.ahead), 1])
forecast_period = xts(t(colSums(round(estimated$forecast[2:5] * 100, 2))), order.by=zoo::index(estimated$forecast[5]))
} else {
period_change = nth(estimated$dfmod_unsmoothed[, 1],-(n.ahead + 1))
forecast_period = round(estimated$forecast[2] * 100, 2)
}
yoy_change = nth(estimated$decomp2[, 1],-1)
forecast_yoy = round(estimated$forecast2[2] * 100, 2)
rub <- '\U20BD'
date_current = nth(zoo::index(estimated$dfmod_unsmoothed),-(n.ahead +
1))
label_current <-
paste(day(as.Date(date_current)), ' ', labelset[month(as.Date(date_current))], '-', substr(year(as.Date(date_current)), 3, 4), sep =
'')
if (weekly) {
date_prev_period = nth(zoo::index(estimated$dfmod_unsmoothed),-(n.ahead +
5))
} else {
date_prev_period = nth(zoo::index(estimated$dfmod_unsmoothed),-(n.ahead +
2))
}
label_prev_period <-
paste(day(as.Date(date_prev_period)), ' ', labelset[month(as.Date(date_prev_period))], '-', substr(year(as.Date(
date_prev_period
)), 3, 4), sep = '')
if (weekly) {
date_fcast_period = as.Date(zoo::index(estimated$forecast[5]))
} else {
date_fcast_period = as.Date(zoo::index(forecast_period))
}
label_fcast_period <-
paste(day(as.Date(date_fcast_period)), ' ', labelset[month(as.Date(date_fcast_period))], '-', substr(year(as.Date(
date_fcast_period
)), 3, 4), sep = '')
date_prev_yoy = nth(zoo::index(estimated$decomp2[, 1]),
ifelse(weekly,-53,-13))
date_next_yoy = nth(zoo::index(estimated$decomp2[, 1]),
ifelse(weekly,-52,-12))
date_fcast_yoy = as.Date(zoo::index(forecast_yoy))
label_prev_yoy <-
paste(day(as.Date(date_prev_yoy)), ' ', labelset[month(as.Date(date_prev_yoy))], '-', substr(year(as.Date(date_prev_yoy)), 3, 4), sep =
'')
label_fcast_yoy <-
paste(day(as.Date(date_fcast_yoy)), ' ', labelset[month(as.Date(date_fcast_yoy))], '-', substr(year(as.Date(date_fcast_yoy)), 3, 4), sep =
'')
label_next_yoy <-
paste(day(as.Date(date_next_yoy)), ' ', labelset[month(as.Date(date_next_yoy))], '-', substr(year(as.Date(date_next_yoy)), 3, 4), sep =
'')
Stack(
div(model_name, style = 'margin-bottom:10px;', class = 'ms-fontSize-20 ms-fontWeight-regular'),
Stack(
horizontal = TRUE,
horizontalAlign = 'space-between',
tokens = list(childrenGap = 10),
# Current price card
makeCard(
title = paste(
price,
' ',
rub,
'/',
substr(
model_name,
regexpr("([^, ]*$)", model_name)[1],
stop = nchar(model_name)
),
sep = ''
),
content2 = Text(paste('Цена, ', label_current, sep = ''), variant = 'mediumPlus'),
size = 10,
card_type = 'neutral',
icon = 'fa-coins'
),
# w-o-w / m-o-m card
makeCard(
content = Text('Инфляция:', variant = 'mediumPlus'),
content2 = Text('Прогноз:', variant = 'mediumPlus'),
title = paste(
ifelse(period_change > 0, '+', ''),
round(period_change * 100, 2),
'%, м/м',
sep = ''
),
tooltip = paste(label_current, '/', label_prev_period),
tooltip2 = paste(label_fcast_period, '/', label_current),
title2 = paste(
ifelse(forecast_period$value > 0, '+', ''),
round(forecast_period$value, 2),
'%, м/м',
sep = ''
),
size = 10,
card_type = ifelse(period_change > 0, "bad", "good"),
icon = ifelse(period_change > 0, "fa-arrow-up", "fa-arrow-down")
),
# y-o-y card
makeCard(
title = paste(
ifelse(yoy_change > 0, '+', ''),
round(yoy_change * 100, 2),
'%, г/г',
sep = ''
),
tooltip = paste(label_current, '/', label_prev_yoy),
content = Text('Инфляция:', variant = 'mediumPlus'),
content2 = Text('Прогноз:', variant = 'mediumPlus'),
title2 = paste(
ifelse(forecast_yoy$value > 0, '+', ''),
round(forecast_yoy$value, 2),
'%, г/г',
sep = ''
),
tooltip2 = paste(label_fcast_yoy, ' / ', label_next_yoy, sep =
''),
size = 10,
card_type = ifelse(yoy_change > 0, "bad", "good"),
icon = ifelse(yoy_change > 0, "fa-arrow-up", "fa-arrow-down")
),
# CPI weight card
if (is.na(weight)) {
makeCard(
title = Text('Вес в ИПЦ недоступен', variant = 'mediumPlus'),
size = 10,
card_type = 'neutral',
icon = 'fa-shopping-basket'
)
} else {
makeCard(
title = paste(weight, '%', sep = ''),
content2 = Text('Вес в ИПЦ', variant = 'mediumPlus'),
size = 10,
card_type = 'neutral',
icon = 'fa-shopping-basket'
)
}
)
)
})
# Plot y-o-y inflation graph when on respective page
output$price_yoy <- renderPlotly({
if (is_page('yoy')) {
plotdecomp(model(), yoy = 1)
}
})
runApp('app_2_0.R')
runApp('app_2_0.R')
load("C:/Users/ilua/Dropbox/Ilya Gulenkov/Dashboard/app2/.RData")
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
setwd("C:/Users/ilua/Dropbox/Ilya Gulenkov/Dashboard/app2")
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
# Prepare list of models
current_folder <- 'data_output/models'
models <- list.files(current_folder, '')
models <- models[-which(models=='model_groups.xlsx')]
models <- substr(models, 1, nchar(models)-6)
runApp('app_2_0.R')
runApp('app_2_0.R')
runApp('app_2_0.R')
# Load value boxes
cards <- 1
runApp('app_2_0.R')
shiny::addResourcePath("shiny.router", system.file("www", package = "shiny.router"))
shiny_router_js_src <- file.path("shiny.router", "shiny.router.js")
shiny_router_script_tag <-
shiny::tags$script(type = "text/javascript", src = shiny_router_js_src)
#---------------------------------------------------------------------------------------------------
# Technical preparations
#---------------------------------------------------------------------------------------------------
# Set encoding
Sys.setlocale('LC_TIME', 'Russian')
options(encoding = "UTF-8")
# Prepare Russian month labels for graphs
labelset <- clock_labels_lookup('ru')[[2]]
labelset <- substr(labelset, 1, nchar(labelset) - 1)
labelset[5] <- 'май'
# Prepare color palette
palette <-
adjustcolor(brewer.pal(n = 9, name = 'Set1'), alpha.f = 0.6)
hse_green = palette[3]
hse_red   =  palette[1]
hse_blue  = palette[2]
# Prepare list of models
model_groups <- read_xlsx('data_output/models/model_groups.xlsx')
models <- substr(model_groups$model, 1, nchar(model_groups$model)-6)
groups_counter <- model_groups %>%
group_by(group) %>%
summarize(n = n())
groups_counter <- groups_counter[match(unique(model_groups$group), groups_counter$group),]
groups_counter$cumsum <- cumsum(groups_counter$n)
groups_nav <- list()
for (i in 1:nrow(groups_counter)) {
elem <- list(key = paste('g', i, sep=''), name = groups_counter$group[i], startIndex = groups_counter$cumsum[i] - groups_counter$n[i], count = groups_counter$n[i], isCollapsed = TRUE)
groups_nav[[i]] <- elem
}
prods_list <- as.list(models)
options <- list(list(key = models[1], text = models[1]))
for (i in 2:length(models)) {
elem <- list(key = models[i], text = models[i])
options[[i]] <- elem
}
prods_list
runApp('app_2_0.R')
# Sidebar navigation & product choice
navigation <- tagList (
Nav(
groups = list(list(links = list(
list(
name = 'Общие сведения',
url = '#!/',
key = 'home',
icon = 'Home'
),
list(
name = 'Изменение цен - г/г',
url = '#!/yoy',
key = 'yoy',
icon = 'Home'
),
list(
name = 'Изменение цен - м/м',
url = '#!/mom',
key = 'mom',
icon = 'Home'
),
list(
name = 'Структура розничной цены',
url = '#!/struct',
key = 'struct',
icon = 'Home'
)
))),
initialSelectedKey = 'home',
styles = list(
root = list(
height = '100%',
boxSizing = 'border-box',
overflowY = 'auto'
)
)
),
Text('Анализируемые товары:', variant='large'),
GroupedList(
items = prods_list,
groups = groups_nav,
selectionMode = 0,
isAllGroupsCollapsed = TRUE,
onRenderCell = JS("(depth, item) => (
jsmodule['react'].createElement('span', { style: { paddingLeft: 20 }, onClick : () => {Shiny.setInputValue('prod_select', item) } }, item)
)")
),
div(
textInput('prod_select', label = NULL, value = models[1], ),
style = 'display:none'
)
runApp('app_2_0.R')
runApp('app_2_0.R')
gc()
library(shiny); runApp('app_2_0.R')
runApp('app_2_0.R')
paste("$('[label='", model_name, "']')", sep='')
runApp('app_2_0.R')
runApp('app_2_0.R')
substr(model()$model_name, 1, length(model()$model_name)-1)
runApp('app_2_0.R')
substr(estimated$model_name, 1, length(estimated$model_name)-1)
runApp('app_2_0.R')
runApp('app_2_0.R')
paste("function highlight() {if ($('.chosen_model').length == 0) { $('[label=", '"',
"Молоко питьевое цельное пастеризованное 2,5-3,2% жирности, л", '"', "]').addClass('chosen_model')}
}",
"$( document ).ready( highlight ); $('.ms-GroupHeader-expand').click(",
"Shiny.setInputValue('prod_select', ",
"'",
substr(estimated$model_name, 1, (length(estimated$model)-1)),
"')",
");",
sep = "")
estimated <- loadR('Молоко питьевое цельное пастеризованное 2,5-3,2% жирности, л')
paste("function highlight() {if ($('.chosen_model').length == 0) { $('[label=", '"',
"Молоко питьевое цельное пастеризованное 2,5-3,2% жирности, л", '"', "]').addClass('chosen_model')}
}",
"$( document ).ready( highlight ); $('.ms-GroupHeader-expand').click(",
"Shiny.setInputValue('prod_select', ",
"'",
substr(estimated$model_name, 1, (length(estimated$model)-1)),
"')",
");",
sep = "")
substr(estimated$model_name, 1, (length(estimated$model)-1))
estimated$model_name
length(estimated$model)
nchar(estimated$model)
runApp('app_2_0.R')
paste("function highlight() {if ($('.chosen_model').length == 0) { $('[label=", '"',
"Молоко питьевое цельное пастеризованное 2,5-3,2% жирности, л", '"', "]').addClass('chosen_model')}
}",
"$( document ).ready( highlight ); $('.ms-GroupHeader-expand').click(",
"Shiny.setInputValue('prod_select', ",
"'",
substr(estimated$model_name, 1, (length(estimated$model_name)-1)),
"')",
");",
sep = "")
paste("function highlight() {if ($('.chosen_model').length == 0) { $('[label=", '"',
"Молоко питьевое цельное пастеризованное 2,5-3,2% жирности, л", '"', "]').addClass('chosen_model')}
}",
"$( document ).ready( highlight ); $('.ms-GroupHeader-expand').click(",
"Shiny.setInputValue('prod_select', ",
"'",
substr(estimated$model_name, 1, (length(estimated$model_name)-1)),
"')",
");",
sep = "")
length(estimated$model_name)
(nchar(estimated$model_name)-1)
runApp('app_2_0.R')
runApp('app_2_0.R')
# Sidebar navigation & product choice
navigation <- tagList (
Nav(
groups = list(list(links = list(
list(
name = 'Общие сведения',
url = '#!/',
key = 'home',
icon = 'Home'
),
list(
name = 'Изменение цен - г/г',
url = '#!/yoy',
key = 'yoy',
icon = 'Home'
),
list(
name = 'Изменение цен - м/м',
url = '#!/mom',
key = 'mom',
icon = 'Home'
),
list(
name = 'Структура розничной цены',
url = '#!/struct',
key = 'struct',
icon = 'Home'
)
))),
initialSelectedKey = 'home',
styles = list(
root = list(
height = '100%',
boxSizing = 'border-box',
overflowY = 'auto'
)
)
),
Text('Анализируемые товары:', variant='large'),
GroupedList(
items = prods_list,
groups = groups_nav,
selectionMode = 0,
onShouldVirtualize = FALSE,
# onToggleCollapse = JS(),
onRenderCell = JS("(depth, item) => (
jsmodule['react'].createElement('div', { className : 'model_choice', style: { paddingLeft: 20 }, label: item, onClick : () => {Shiny.setInputValue('prod_select', item) } }, item)
)")
),
div(
textInput('prod_select', label = NULL, value = models[1], ),
style = 'display:none'
)
model_toggler
